name: Test

on: push

env:
  OTP_VERSION: "24.0.5"
  ELIXIR_VERSION: "1.12.2"
  NODE_VERSION: "14"
  MIX_ENV: test
  DB_HOST: localhost

jobs:
  build_and_lint_codebase:
    name: Linting
    runs-on: ubuntu-latest
    timeout-minutes: 15

    services:
      db:
        image: postgres:12.3
        ports: ['5432:5432']
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Cancel previous runs
        uses: styfle/cancel-workflow-action@0.8.0
        with:
          access_token: ${{ github.token }}

      - name: Checkout the repository
        uses: actions/checkout@v2
        with:
          ref: ${{ github.head_ref }}

      - name: Set up Elixir
        uses: erlef/setup-elixir@v1
        with:
          otp-version: ${{ env.OTP_VERSION }}
          elixir-version: ${{ env.ELIXIR_VERSION }}

      - name: Set up Node
        uses: actions/setup-node@v2.1.5
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache Elixir build
        uses: actions/cache@v2
        with:
          path: |
            _build
            deps
          key: ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-mix-

      - name: Cache Node npm
        uses: actions/cache@v2
        with:
          path: assets/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Dependencies
        run: mix deps.get

      - name: Compile dependencies
        run: mix compile --warnings-as-errors --all-warnings

      - name: Install Node modules
        run: npm --prefix assets install

      - name: Compile assets
        run: npm run --prefix assets build:dev

      - name: Create database
        run: mix ecto.create

      - name: Migrate database
        run: mix ecto.migrate

      - name: Run codebase check
        run: mix codebase

  unit_test:
    name: Run Unit Tests

    needs: build_and_lint_codebase

    runs-on: ubuntu-latest

    timeout-minutes: 5

    services:
      db:
        image: postgres:12.3
        ports: ['5432:5432']
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2
        with:
          ref: ${{ github.head_ref }}

      - name: Set up Elixir
        uses: erlef/setup-elixir@v1
        with:
          otp-version: ${{ env.OTP_VERSION }}
          elixir-version: ${{ env.ELIXIR_VERSION }}

      - name: Cache Elixir build
        uses: actions/cache@v2
        with:
          path: |
            _build
            deps
          key: ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-mix-

      - name: Install Dependencies
        run: mix deps.get

      - name: Compile dependencies
        run: mix compile --warnings-as-errors --all-warnings

      - name: Create database
        run: mix ecto.create

      - name: Migrate database
        run: mix ecto.migrate

      - name: Run Tests
        run: mix coverage --exclude feature_test

      - name: Upload Code Coverage Artifacts
        uses: actions/upload-artifact@v2
        if: ${{ failure() }}
        with:
          name: code_coverage
          path: cover/

  feature_test:
    name: Run Feature Tests

    needs: build_and_lint_codebase

    runs-on: ubuntu-latest

    timeout-minutes: 15

    services:
      db:
        image: postgres:12.3
        ports: ['5432:5432']
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2
        with:
          ref: ${{ github.head_ref }}

      - name: Set up Elixir
        uses: erlef/setup-elixir@v1
        with:
          otp-version: ${{ env.OTP_VERSION }}
          elixir-version: ${{ env.ELIXIR_VERSION }}

      - name: Set up Node
        uses: actions/setup-node@v2.1.5
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache Elixir build
        uses: actions/cache@v2
        with:
          path: |
            _build
            deps
          key: ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-mix-

      - name: Cache Node npm
        uses: actions/cache@v2
        with:
          path: assets/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Dependencies
        run: mix deps.get

      - name: Compile dependencies
        run: mix compile --warnings-as-errors --all-warnings

      - name: Install Node modules
        run: npm --prefix assets install

      - name: Compile assets
        run: npm run --prefix assets build:dev

      - name: Create database
        run: mix ecto.create

      - name: Migrate database
        run: mix ecto.migrate

      - name: Run Tests
        run: mix test --only feature_test

      - name: Upload Test Artifacts
        uses: actions/upload-artifact@v2
        if: ${{ failure() }}
        with:
          name: wallaby_screenshots
          path: tmp/wallaby_screenshots/
